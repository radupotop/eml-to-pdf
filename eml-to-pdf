#!/usr/bin/env python3

import argparse
import html
import sys
import tempfile
from datetime import datetime
from email import policy
from email.message import EmailMessage, MIMEPart
from email.parser import BytesParser
from email.utils import parsedate_to_datetime
from pathlib import Path
from typing import NamedTuple
from zoneinfo import ZoneInfo

import weasyprint as wp
from bs4 import BeautifulSoup
from jinja2 import Environment

EML_CONTENT_TYPES = ('text/html', 'text/plain')
EML_HEADERS = ('Date', 'Subject', 'From', 'To', 'Cc')
PREFERRED = EML_CONTENT_TYPES[0]
TS_FORMAT = '%-d %B %Y, %H:%M'  # https://strftime.org/
TZ = ZoneInfo('Europe/London')


HTML_TPL = """<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EMAIL: {{ headers.Date | date_fmt }} - {{ headers.Subject | escape }} - {{ headers.From | escape }}</title>
    <meta name="author" content="{{ headers.From | escape }}">
    <meta name="dcterms.created" content="{{ headers.Date | replace(' ', 'T') }}">
    <link rel="stylesheet" href="file:///home/radu/Projects/eml-to-pdf/style.css">
</head>
<body>
<div id="headers">
    <table>
    <tbody>
        {% for key, value in headers.items() %}
        {% if value is not none %}
            <tr>
                <th>{{ key }}:</th>
                <td>{{ value | date_fmt | escape }}</td>
            </tr>
        {% endif %}
        {% endfor %}
    </tbody>
    </table>
</div>
<div id="content" class="{{ mimetype | replace('/', '-') }}">
{{ content | safe }}
</div>
</body>
</html>
"""


class ParsedPart(NamedTuple):
    content_type: str
    payload: str


def date_fmt(value, date_format=TS_FORMAT):
    if isinstance(value, datetime):
        return value.strftime(date_format)
    return value


def strip_html_tags(html_source: str) -> str:
    soup = BeautifulSoup(html_source, 'html.parser')
    # Delete all <style> tags
    for tag in soup.find_all('style'):
        print('Removing tag:', tag, file=sys.stderr)
        tag.decompose()
    # Delete all style= attributes
    for tag in soup.find_all(style=True):
        del tag['style']
    if soup.body:
        return ''.join(map(str, soup.body.contents))
    return ''


def read_eml(eml_path: str) -> EmailMessage:
    # Load the email
    fb = Path(eml_path).read_bytes()
    msg = BytesParser(policy=policy.default).parsebytes(fb)
    return msg


def parse_single_header(msg: EmailMessage, head: str):
    '''
    Parse a single msg header at a time.
    '''
    if head == 'Date':
        return parsedate_to_datetime(msg[head]).astimezone(TZ)
    return msg.get(head)


def parse_all_headers(msg: EmailMessage):
    header_values = [parse_single_header(msg, h) for h in EML_HEADERS]
    return dict(zip(EML_HEADERS, header_values))


def parse_part(part: MIMEPart) -> ParsedPart | None:
    if part.is_attachment():
        return
    content_type = part.get_content_type()
    if content_type in EML_CONTENT_TYPES:
        print(content_type, file=sys.stderr)
        charset = part.get_content_charset() or 'utf-8'
        payload = part.get_payload(decode=True).decode(charset, 'ignore')
        if content_type == 'text/html':
            payload = strip_html_tags(payload)
        return ParsedPart(content_type, payload)


def parse_multipart(msg: EmailMessage) -> ParsedPart:
    part_map = dict()
    for part in msg.walk():  # flat list of all sub-parts
        if p := parse_part(part):
            part_map[p.content_type] = p
    return part_map[PREFERRED]


def eml_to_html(msg: EmailMessage):
    # Extract headers
    headers = parse_all_headers(msg)
    mimetype, content = parse_multipart(msg)
    env = Environment()
    env.filters['date_fmt'] = date_fmt
    template = env.from_string(HTML_TPL)
    return template.render(
        headers=headers,
        mimetype=mimetype,
        content=content,
    )


def save_html(path, html_content):
    with tempfile.NamedTemporaryFile(
        delete=False, prefix='eml-', suffix='.html', mode='w', encoding='utf-8'
    ) as tmp:
        tmp.write(html_content)
    print(tmp.name, file=sys.stderr)


def save_pdf(path, html_content):
    pdf_path = Path(path).with_suffix('.pdf')
    wp.HTML(string=html_content).write_pdf(pdf_path)
    print(f'"{pdf_path}"')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('email_files', type=str, nargs='+')
    args = parser.parse_args()
    # Run all
    for eml_path in args.email_files:
        raw_eml = read_eml(eml_path)
        html_content = eml_to_html(raw_eml)
        save_html(eml_path, html_content)
        save_pdf(eml_path, html_content)
